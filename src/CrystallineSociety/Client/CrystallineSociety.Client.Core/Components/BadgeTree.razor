@page "/badge-tree"
@using CrystallineSociety.Shared.Dtos.BadgeSystem
@using Microsoft.AspNetCore.Components.Web
@using CrystallineSociety.Client.Core.Components

<div class="border rounded-3 position-relative badge-container">
    <div class="accordion accordion-flush" id="accordionFlushExample">
        <form class="d-flex mb-2">
            <input class="form-control form-control-sm" type="search" placeholder="Search" aria-label="Search" />
        </form>
        @if (Badges == null)
        {
                <div>
                    <div class="vh-100 d-flex justify-content-center loading-box pt-4">
                        <div class="spinner-border text-secondary position-fixed" role="status">
                            <span class="visually-hidden"></span>
                        </div>
                    </div>
                </div>
        }
        else
        {
                <div class="ps-2 vh-100 overflow-auto">
                @for (int i = 0; i < 5; i++)
                {
                            <ul class="list-unstyled ps-0 mb-0">
                                <li class="mb-1">
                                    <button class="btn btn-light btn-sm d-flex align-items-center p-0 collapsed customize-spacing">
                                        <span class="badge-image flex-shrink-0 @GetArrowClass(homeCollapseState.ContainsKey(i) && homeCollapseState[i])"></span>
                                        <div class="btn btn-sm font-weight-bold btn-toggle d-inline-flex align-items-center border-0 ps-1 collapsed flex-grow-1 text-wrap text-start text-break h6 mb-0" @onclick="() => ToggleHomeCollapse(i)" aria-expanded="@(homeCollapseState.ContainsKey(i) && homeCollapseState[i])" data-bs-toggle="collapse" data-bs-target="#home-collapse-@i">
                                            Folder @(i + 1)
                                        </div>
                                    </button>
                                    <div class="collapse @(homeCollapseState.ContainsKey(i) && homeCollapseState[i] ? "show" : "")" id="home-collapse-@i">
                                @if (Badges != null)
                                {
                                                <ul class="btn-toggle-nav list-unstyled fw-normal pb-1 ps-3" id="home-collapse-@i">
                                        @for (int badgeIndex = 0; badgeIndex < Badges.Count; badgeIndex++)
                                        {
                                            var badge = Badges[badgeIndex];
                                                            <li>
                                                                <button class="btn btn-light btn-sm font-weight-bold btn-toggle d-inline-flex align-items-center ps-1 collapsed text-start text-break customize-spacing @(ActiveBadgeUrl == badge.Url ? "active" : "")" @onclick="() => OnBadgeClick(badge)">
                                                    @badge.Title
                                                                </button>
                                                            </li>
                                            // Temp code for SubFolder name
                                            @for (int j = 0; j < 3; j++)
                                            {
                                                                    <ul class="list-unstyled ps-0 mb-0">
                                                                        <li>
                                                                            <button class="btn btn-light btn-sm d-flex align-items-center p-0 customize-spacing">
                                                                                <span class="badge-image flex-shrink-0 @GetArrowClass(subFolderCollapseState.ContainsKey((i, badgeIndex, j)) && subFolderCollapseState[(i, badgeIndex, j)])"></span>
                                                                                <div class="btn btn-sm font-weight-bold btn-toggle d-inline-flex align-items-center border-0 ps-1 collapsed flex-grow-1 text-wrap text-start text-break h6 mb-0" @onclick="() => ToggleSubFolder(i, badgeIndex, j)" aria-expanded="@(subFolderCollapseState.ContainsKey((i, badgeIndex, j)) && subFolderCollapseState[(i, badgeIndex, j)])" data-bs-toggle="collapse" data-bs-target="#subfolder-collapse-@i-@badgeIndex-@j">
                                                                                    SubFolder @(j + 1)
                                                                                </div>
                                                                            </button>
                                                                            <div class="collapse @(subFolderCollapseState.ContainsKey((i, badgeIndex, j)) && subFolderCollapseState[(i, badgeIndex, j)] ? "show" : "")" id="subfolder-collapse-@i-@badgeIndex-@j">
                                                            @if (Badges != null)
                                                            {
                                                                                        <ul class="btn-toggle-nav list-unstyled fw-normal ps-3">
                                                                    @for (int k = 0; k < 2; k++)
                                                                    {
                                                                                                    <li>
                                                                                                        <button class="btn btn-light btn-sm font-weight-bold btn-toggle d-inline-flex align-items-center ps-1 collapsed text-start text-break customize-spacing">
                                                                                                            sub @(k + 1)
                                                                                                        </button>
                                                                                                    </li>
                                                                    }
                                                                                        </ul>
                                                            }
                                                                            </div>
                                                                        </li>
                                                                    </ul>
                                            }
                                        }
                                                </ul>
                                }
                                    </div>
                                </li>
                            </ul>
                }
                </div>
        }
    </div>
</div>